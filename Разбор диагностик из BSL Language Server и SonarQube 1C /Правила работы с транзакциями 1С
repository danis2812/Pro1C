
Список диагностик, которые будут разбираться

BSL диагностики:
1. Метод НачатьТранзакцию должен быть за пределами блока Попытка-Исключение непосредственно перед оператором Попытка; 
https://1c-syntax.github.io/bsl-language-server/diagnostics/BeginTransactionBeforeTryCatch/
2. Метод ЗафиксироватьТранзакцию должен идти последним в блоке Попытка перед оператором Исключение, чтобы гарантировать, что после ЗафиксироватьТранзакцию не возникнет исключение.
https://1c-syntax.github.io/bsl-language-server/diagnostics/CommitTransactionOutsideTryCatch/
3. Начало транзакции и ее фиксация (отмена) должны происходить в контексте одного метода.
https://1c-syntax.github.io/bsl-language-server/diagnostics/PairingBrokenTransaction/
4. Вызов метода ОтменитьТранзакцию должен производиться в блоке Попытка-Исключение. В блоке Исключение нужно сначала вызвать метод ОтменитьТранзакцию, а затем выполнять другие действия, если они требуются.
https://1c-syntax.github.io/bsl-language-server/diagnostics/WrongUseOfRollbackTransactionMethod/

SonarQube диагностики
1. Метод "НачатьТранзакцию" должен располагаться непосредственно перед оператором "Попытка"
https://docs.checkbsl.org/checks/overall/BeginTransactionInTryBlock/
2. Завершение транзакции должно выполняться в конструкции Попытка ... Исключение
https://docs.checkbsl.org/checks/overall/CommitTransactionOutsideTry/
3. Для вызова НачатьТранзакцию отсутствует парный вызов ЗафиксироватьТранзакцию
https://docs.checkbsl.org/checks/overall/PairBeginCommitTransactionCall/
4. Использование синхронных методов в транзакции / модальные вызовы
https://docs.checkbsl.org/checks/overall/SynchronousMethodsInTransaction/
5. Неправильное использование метода "ОтменитьТранзакцию"
https://docs.checkbsl.org/checks/overall/WrongUsageOfRollbackTransactionMethod/

Итак, начнем...

Правило: 
  
  Метод НачатьТранзакцию должен быть за пределами блока Попытка-Исключение непосредственно перед оператором Попытка;
  
  BSL - https://1c-syntax.github.io/bsl-language-server/diagnostics/BeginTransactionBeforeTryCatch/
  SonarQube - https://docs.checkbsl.org/checks/overall/BeginTransactionInTryBlock/

Объяснение:
  
  Метод НачатьТранзакцию() следует располагать непосредственно перед блоком Попытка, 
  чтобы гарантировать, что все операции, которые должны быть выполнены в рамках одной транзакции, включая потенциальные исключения, 
  обрабатываются внутри единого блока управления транзакциями, что предотвращает ошибки типа "В этой транзакции уже происходили ошибки".
  
  Почему именно так:

  1. Целостность транзакции и предотвращение ошибок:
  Вызов НачатьТранзакцию() перед Попытка гарантирует, что любая операция внутри блока Попытка (включая чтение, запись и блокировка данных) будет частью этой транзакции. 
  Если в процессе выполнения блока Попытка возникнет исключение, оно будет перехвачено и обработано, а транзакция может быть откачена, предотвращая частичные изменения данных.
  
  2. Правильное управление вложенными транзакциями:
  Если НачатьТранзакцию() находится внутри Попытка, это может нарушить парность вызовов НачатьТранзакцию() и ЗафиксироватьТранзакцию(), что приводит к ошибкам, так как система не сможет корректно определить начало и конец транзакции.

  3. Гарантированное выполнение ЗафиксироватьТранзакцию():
  Если НачатьТранзакцию() будет внутри Попытка, а ЗафиксироватьТранзакцию() окажется вне блока или будет выполнен до возникновения исключения, это может привести к неправильному состоянию транзакции.

Примеры:

	// Правильно	
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;    

	// Неправильно, начало транзакции находится внутри конструкции Попытка исключение	
	Попытка
		НачатьТранзакцию();
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;



	// Правильно
	НачатьТранзакцию();	
	Попытка
		// Заполнение реквизита ДатаОбработки
		ДатаОбработки = ТекущаяДатаСеанса();

		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

	// Неправильно, заполнение реквизита ДатаОбработки находится после НачалаТранзакции, но не обрабатывается через конструкцию Попытка Исключение
	НачатьТранзакцию();

	// Заполнение реквизита ДатаОбработки
	ДатаОбработки = ТекущаяДатаСеанса();	
	Попытка

		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;	

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Правило: 
  
  Метод ЗафиксироватьТранзакцию должен идти последним в блоке Попытка перед оператором Исключение, чтобы гарантировать, что после ЗафиксироватьТранзакцию не возникнет исключение.
  
  BSL - https://1c-syntax.github.io/bsl-language-server/diagnostics/CommitTransactionOutsideTryCatch/
  SonarQube - https://docs.checkbsl.org/checks/overall/CommitTransactionOutsideTry/

Объяснение:

	Метод ЗафиксироватьТранзакцию (или COMMIT в SQL) должен располагаться после всех операций, 
	которые должны быть выполнены в рамках транзакции, но перед блоком Исключение, 
	чтобы гарантировать успешное завершение транзакции и предотвратить возможность ее отката в случае непредвиденных ошибок после фиксации.

	Фиксация транзакции:
	Метод ЗафиксироватьТранзакцию окончательно сохраняет все изменения, сделанные в рамках транзакции, в базе данных.
	После выполнения метода ЗафиксироватьТранзакцию транзакцию уже невозможно откатить.
	
	Блок Исключение:
	
	Если ЗафиксироватьТранзакцию разместить после блока Исключение, то в случае возникновения исключения, например, 
	после выполнения каких-либо операций, но до фиксации, транзакция будет отменена (неявно или через ОтменитьТранзакцию). 
	Если же ЗафиксироватьТранзакцию окажется внутри блока Исключение, это может привести к тому, 
	что транзакция будет зафиксирована, несмотря на ошибку, что противоречит идее целостности данных.

Правильная последовательность:
	
	Начало транзакции.
	Выполнение всех операций в рамках транзакции.
	Вызов ЗафиксироватьТранзакцию.
	Блок Исключение (обрабатывает возможные ошибки, произошедшие до или во время выполнения операций, но не после фиксации). 
	В блоке Исключение обычно вызывается метод ОтменитьТранзакцию (ROLLBACK) для отмены транзакции, если она еще не была зафиксирована. 

Примеры:

	// первый пример
	// Правильно, метод ЗафиксироватьТранзакцию находится в блоке Попытка и после него нету других вызовов 
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;    

	// второй пример
	// Неправильно, фиксация открытой транзакции вне блока Попытка исключение
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
				
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;	

	// Ошибка, фиксация открытой транзакции вне блока Попытка исключение
	ЗафиксироватьТранзакцию();

	// третий пример
	// Неправильно, ЗафиксироватьТранзакцию выполняется дополнительный код, который потенциально может вызывать Исключение
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();

		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();
		
		Метод(); // Ошибка, код, который потенциально может вызвать ошибку
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

	// четвертый пример
	// Неправильно, метод ЗафиксироватьТранзакцию находится в блоке Исключение
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();

		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();
		
	Исключение

		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию(); // Ошибка, метод вызывается в блоке Исключение
		Иначе		
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;

	КонецПопытки;

	// пятый пример
	// Неправильно, не весь код находится в блоке Попытка
	НачатьТранзакцию();

	// создание элемента справочника
	ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
	ТестоваяПроверка.Записать();

	Попытка				
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Правило: 
  
	Начало транзакции и ее фиксация (отмена) должны происходить в контексте одного метода.
	  
	BSL - https://1c-syntax.github.io/bsl-language-server/diagnostics/PairingBrokenTransaction/

Объяснение:

	Начало и завершение (фиксация или отмена) транзакции должны происходить в контексте одного метода для обеспечения корректной работы системы и предотвращения ошибок, 
	таких как частичное выполнение операций или неопределенное состояние данных. Это означает, что операция, начинающая транзакцию, должна быть либо зафиксирована (ЗафиксироватьТранзакцию, commit), 
	либо отменена (ОтменитьТранзакцию, rollback) в рамках того же метода, где она была инициирована, или в блоке обработки исключений внутри него.

	Почему это важно:

	Целостность данных:
	Транзакция гарантирует, что все изменения либо применяются полностью, либо не применяются вообще, предотвращая потерю или дублирование данных.

	Управление ошибками:
	В случае возникновения ошибки в процессе выполнения транзакции, откат (ОтменитьТранзакцию, rollback) возвращает систему в исходное состояние до начала транзакции, исключая некорректные изменения.

	Предотвращение проблем с ресурсами:
	Отмена транзакции также освобождает ресурсы, которые могли быть заблокированы в процессе её выполнения.

	Платформа 1С может автоматически управлять транзакциями при модификации данных в определенных контекстах, но явное управление транзакциями все равно важно для надежности.


Примеры:

	// первый пример
	// Правильно, все находится к контексте одного метода 
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

	// второй пример
	// Неправильно, Начало транзакции находится в одном методе, ее фиксация или откат в другом
	Процедура ВыполнениеСценарияТестирования()
			
		НачатьТранзакцию();
		ВыполнениеЗаписиИИзменений(); // неверно
		
	КонецПроцедуры
	
	Процедура ВыполнениеЗаписиИИзменений()
			
		Попытка		
			// создание элемента справочника
			ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
			ТестоваяПроверка.Записать();
			
			// фиксация открытой транзакции
			ЗафиксироватьТранзакцию();		
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		КонецПопытки;
		
	КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Правило: 
  
	Вызов метода ОтменитьТранзакцию должен производиться в блоке Попытка-Исключение. В блоке Исключение нужно сначала вызвать метод ОтменитьТранзакцию, а затем выполнять другие действия, если они требуются.
	  
	BSL - https://1c-syntax.github.io/bsl-language-server/diagnostics/WrongUseOfRollbackTransactionMethod/
	SonarQube - https://docs.checkbsl.org/checks/overall/WrongUsageOfRollbackTransactionMethod/

Объяснение:

	Вызов метода ОтменитьТранзакцию должен производиться в блоке Исключение блока Попытка-Исключение в системе "1С:Предприятие". 
	Важно выполнить ОтменитьТранзакцию в первую очередь внутри блока Исключение, чтобы гарантировать откат изменений, даже если в этом блоке произойдет другое исключение.

	Это правило требуется, чтобы убрать потенциальную возможность выброса исключения в блоке "Исключение", 
	которая может привести к тому, что метод "ОтменитьТранзакцию" не будет вызван.

Пример:

	// Неправильно, если перед ОтменитьТранзакцию выполнится обращение к базе данных, то появится ошибка "В данной транзакции уже происходили ошибки" и не дойдет до вызова ОтменитьТранзакцию

	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Свойство1 = Истина; // ставим значение Истина, чтобы в модуле объекта справочника вызвать Отказ при записи
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		
		ВыполнитьОбращениеКБазеДанных(); // Неправильно, приведет к ошибке "В данной транзакции уже происходили ошибки"
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Правило: 
  
	Использование синхронных методов в транзакции / модальные вызовы
	  
	SonarQube - https://docs.checkbsl.org/checks/overall/SynchronousMethodsInTransaction/

Объяснение:

	Синхронные методы в контексте транзакций означают, что операция блокирует выполнение основного потока кода до тех пор, 
	пока транзакция полностью не завершится и не будет подтверждена (или отменена), обеспечивая строгую гарантию целостности данных, 
	но ценой возможной блокировки и снижения производительности. 

	Блокировка потока:
	Синхронный метод или операция ожидает завершения всех действий внутри транзакции перед тем, как продолжить выполнение основного кода. 
	Например, при синхронном подтверждении транзакции сервер СУБД ждет записи транзакции в постоянное хранилище перед тем, как сообщить клиенту об успехе.

	Гарантия целостности данных:
	Основная цель синхронного подхода — обеспечение того, что транзакция будет либо полностью выполнена, либо полностью отменена, даже в случае сбоя системы. 
	Это достигается путем ожидания подтверждения записи в журналах транзакций (WAL) перед возвратом результата клиенту. 

	Примеры синхронных методов: модальные вызовы Предупреждение() ОткрытьФормуМодально(), использование которых само по себе является ошибкой в любых случаях, 
	КопироватьФайл(), ВыбратьИзСписка(), любые обращения к внешним ресурсам (Файловая система, HTTP-WEB-сервисы, FTP, COM объекты в Windows, и т. п.) 
	Приложение 13. Соответствие синхронных методов асинхронным аналогам из документации по платформе https://its.1c.ru/db/v838doc/bookmark/dev/TI000000438

Примеры:

	// первый пример
	// Неправильно, создание объекта WSПрокси, подключение к внешнему WEB-сервису
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();

		WSПрокси = Новый WSПрокси(WSОпределение, URIПространстваИмен, ИмяСервиса);	// без таймаута - ошибка!

		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;		

	// второй пример
	// Неправильно, обращение к файловой системе внутри транзакции
	НачатьТранзакцию();
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Записать();

		Файл = Новый Файл;
		Файл.Записать(); // Неправильно, обращение к файловой системе
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;

	Правильно: Вынести обращение к внешним ресурсам за пределы транзакции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

Правило: 
  
	Для вызова НачатьТранзакцию отсутствует парный вызов ЗафиксироватьТранзакцию

	SonarQube - https://docs.checkbsl.org/checks/overall/PairBeginCommitTransactionCall/

Объяснение:

	При использовании транзакций следует придерживаться следующей схемы обработки исключений в коде на сервере:
	
	НачатьТранзакцию();
	Попытка
	    Запрос = Новый Запрос("...");
	    Выборка = Запрос.Выполнить().Выбрать();
	    Пока Выборка.Следующий() Цикл
	        ...  
	    КонецЦикла;  
	    ЗафиксироватьТранзакцию();
	Исключение
	    ОтменитьТранзакцию();
	    ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	    ВызватьИсключение;
	КонецПопытки;

	Поскольку исключение не отменяет транзакцию сразу, но запрещает успешное завершение транзакции, 
	то все вызовы НачатьТранзакцию, с одной стороны, и ЗафиксироватьТранзакцию или ОтменитьТранзакцию, с другой стороны, должны быть парными.
