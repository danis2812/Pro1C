Список диагностик, которые будут разбираться

BSL диагностики:
1. Метод НачатьТранзакцию должен быть за пределами блока Попытка-Исключение непосредственно перед оператором Попытка; 
https://1c-syntax.github.io/bsl-language-server/diagnostics/BeginTransactionBeforeTryCatch/
2. Метод ЗафиксироватьТранзакцию должен идти последним в блоке Попытка перед оператором Исключение, чтобы гарантировать, что после ЗафиксироватьТранзакцию не возникнет исключение.
https://1c-syntax.github.io/bsl-language-server/diagnostics/CommitTransactionOutsideTryCatch/
3. Начало транзакции и ее фиксация (отмена) должны происходить в контексте одного метода.
https://1c-syntax.github.io/bsl-language-server/diagnostics/PairingBrokenTransaction/
4. Вызов метода ОтменитьТранзакцию должен производиться в блоке Попытка-Исключение. В блоке Исключение нужно сначала вызвать метод ОтменитьТранзакцию, а затем выполнять другие действия, если они требуются.
https://1c-syntax.github.io/bsl-language-server/diagnostics/WrongUseOfRollbackTransactionMethod/

SonarQube диагностики
1. Метод "НачатьТранзакцию" должен располагаться непосредственно перед оператором "Попытка"
https://docs.checkbsl.org/checks/overall/BeginTransactionInTryBlock/
2. Завершение транзакции должно выполняться в конструкции Попытка ... Исключение
https://docs.checkbsl.org/checks/overall/CommitTransactionOutsideTry/
3. Для вызова НачатьТранзакцию отсутствует парный вызов ЗафиксироватьТранзакцию
https://docs.checkbsl.org/checks/overall/PairBeginCommitTransactionCall/
4. Использование синхронных методов в транзакции / модальные вызовы
https://docs.checkbsl.org/checks/overall/SynchronousMethodsInTransaction/
5. Неправильное использование метода "ОтменитьТранзакцию"
https://docs.checkbsl.org/checks/overall/WrongUsageOfRollbackTransactionMethod/

Итак, начнем...

Правило: 
  
  Метод НачатьТранзакцию должен быть за пределами блока Попытка-Исключение непосредственно перед оператором Попытка;
  
  BSL - https://1c-syntax.github.io/bsl-language-server/diagnostics/BeginTransactionBeforeTryCatch/
  SonarQube - https://docs.checkbsl.org/checks/overall/BeginTransactionInTryBlock/

Объяснение:
  
  Метод НачатьТранзакцию() следует располагать непосредственно перед блоком Попытка, 
  чтобы гарантировать, что все операции, которые должны быть выполнены в рамках одной транзакции, включая потенциальные исключения, 
  обрабатываются внутри единого блока управления транзакциями, что предотвращает ошибки типа "В этой транзакции уже происходили ошибки".
  
  Почему именно так:

  1. Целостность транзакции и предотвращение ошибок:
  Вызов НачатьТранзакцию() перед Попытка гарантирует, что любая операция внутри блока Попытка (включая чтение, запись и блокировка данных) будет частью этой транзакции. 
  Если в процессе выполнения блока Попытка возникнет исключение, оно будет перехвачено и обработано, а транзакция может быть откачена, предотвращая частичные изменения данных.
  
  2. Правильное управление вложенными транзакциями:
  Если НачатьТранзакцию() находится внутри Попытка, это может нарушить парность вызовов НачатьТранзакцию() и ЗафиксироватьТранзакцию(), что приводит к ошибкам, так как система не сможет корректно определить начало и конец транзакции.

  3. Гарантированное выполнение ЗафиксироватьТранзакцию():
  Если НачатьТранзакцию() будет внутри Попытка, а ЗафиксироватьТранзакцию() окажется вне блока или будет выполнен до возникновения исключения, это может бы привести к неправильному состоянию транзакции.

Примеры:
```ruby
	// Правильно	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка		
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Свойство1 = Истина; // ставим значение Истина, чтобы в модуле объекта справочника вызвать Отказ при записи
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;    

	// Неправильно	
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		// создание элемента справочника
		ТестоваяПроверка = Справочники.ВидыПроверок.НайтиПоНаименованию("Тестовая проверка 1").ПолучитьОбъект();
		ТестоваяПроверка.Свойство1 = Истина; // ставим значение Истина, чтобы в модуле объекта справочника вызвать Отказ при записи
		ТестоваяПроверка.Записать();
		
		// фиксация открытой транзакции
		ЗафиксироватьТранзакцию();		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("СценарийРаботыСТранзакциями", УровеньЖурналаРегистрации.Ошибка,,, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
	КонецПопытки;
```
